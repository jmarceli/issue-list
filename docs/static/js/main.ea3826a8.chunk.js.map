{"version":3,"sources":["apollo/resolvers.js","apollo/index.js","apollo/queries.js","apollo/mutations.js","components/IssueItem/index.jsx","components/IssueList/index.jsx","components/App/index.jsx","components/Root/index.jsx","serviceWorker.js","index.js"],"names":["resolvers","Mutation","toggleIssue","_","_ref","_ref2","issueId","id","cache","getCacheKey","concat","fragment","gql","_templateObject","issue","readFragment","data","Object","objectSpread","isOpen","writeData","Issue","client","ApolloClient","uri","request","_request","asyncToGenerator","regenerator_default","a","mark","_callee","operation","wrap","_context","prev","next","process","setContext","headers","authorization","stop","this","_x","apply","arguments","clientState","GET_ISSUES","queries_templateObject","TOGGLE_ISSUE","mutations_templateObject","React","memo","withStyles","theme","collapse","paddingTop","paddingBottom","body","& > p","paddingLeft","classes","url","title","state","handleToggle","react_default","createElement","Fragment","ListItem_default","ListItemIcon_default","IconButton_default","aria-label","href","Link_default","ListItemText_default","primary","ListItemSecondaryAction_default","onClick","ExpandLess_default","ExpandMore_default","className","Collapse_default","in","timeout","unmountOnExit","secondary","react_apollo_browser_umd","mutation","List_default","data-testid","query","loading","error","JSON","stringify","repository","issues","edges","map","index","components_IssueItem","assign","key","variables","node","root","padding","app","maxWidth","margin","CssBaseline_default","Paper_default","Typography_default","variant","component","components_IssueList","Root","components_App","Boolean","window","location","hostname","match","ReactDOM","render","components_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea3826a8.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst resolvers = {\n  Mutation: {\n    toggleIssue: (_, { id: issueId }, { cache, getCacheKey }) => {\n      const id = `Issue:${issueId}`;\n      const fragment = gql`\n        fragment openedIssue on Issue {\n          id\n          title\n          url\n          updatedAt\n          state\n          body\n          isOpen\n        }\n      `;\n      const issue = cache.readFragment({ id, fragment });\n      const data = { ...issue, isOpen: !issue.isOpen };\n      cache.writeData({ id, data });\n      return null;\n    },\n  },\n  Issue: {\n    // initial state - required in case of merged local state\n    isOpen: () => false,\n  },\n};\n\nexport default resolvers;\n","import ApolloClient from 'apollo-boost';\nimport resolvers from './resolvers';\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  request: async operation => {\n    // TODO: get token from user input\n    const token = process.env.REACT_APP_GH_TOKEN;\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  },\n  clientState: {\n    resolvers,\n  },\n});\n\nexport default client;\n","import { gql } from 'apollo-boost';\n\nexport const GET_ISSUES = gql`\n  query issues {\n    repository(owner: \"facebook\", name: \"react\") {\n      issues(first: 20, orderBy: { direction: DESC, field: CREATED_AT }) {\n        edges {\n          node {\n            id\n            state\n            title\n            url\n            updatedAt\n            body\n            isOpen @client\n          }\n        }\n      }\n    }\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const TOGGLE_ISSUE = gql`\n  mutation toggleIssue($id: String!) {\n    toggleIssue(id: $id) @client\n  }\n`;\n","import React from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Collapse from '@material-ui/core/Collapse';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LinkIcon from '@material-ui/icons/Link';\nimport OpenIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/ExpandLess';\n\nconst styles = theme => ({\n  collapse: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  body: {\n    '& > p': {\n      paddingLeft: 80,\n    },\n  },\n});\n\nconst IssueItem = ({\n  classes,\n  url,\n  title,\n  state,\n  body,\n  id,\n  isOpen,\n  handleToggle,\n}) => (\n  <React.Fragment>\n    <ListItem>\n      <ListItemIcon>\n        <IconButton aria-label={`Go to issue ${id}`} href={url}>\n          <LinkIcon />\n        </IconButton>\n      </ListItemIcon>\n      <ListItemText primary={`${title} (${state})`} />\n      <ListItemSecondaryAction>\n        <IconButton\n          aria-label={`${isOpen ? 'Close' : 'Open'} description`}\n          onClick={() => handleToggle()}\n        >\n          {isOpen ? <CloseIcon /> : <OpenIcon />}\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n    <ListItem className={classes.collapse}>\n      <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n        <ListItemText className={classes.body} secondary={body} />\n      </Collapse>\n    </ListItem>\n  </React.Fragment>\n);\n\nexport default React.memo(withStyles(styles)(IssueItem));\n","import React from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Query, Mutation } from 'react-apollo';\nimport { GET_ISSUES } from '../../apollo/queries';\nimport { TOGGLE_ISSUE } from '../../apollo/mutations';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IssueItem from '../IssueItem';\n\nconst styles = theme => ({});\n\nconst IssueList = ({ classes }) => (\n  <div>\n    <Mutation mutation={TOGGLE_ISSUE}>\n      {toggleIssue => (\n        <List data-testid=\"issues-list\">\n          <Query query={GET_ISSUES}>\n            {({ loading, error, data }) => {\n              if (loading) {\n                return (\n                  <ListItem>\n                    <ListItemText primary=\"Loading...\" />\n                  </ListItem>\n                );\n              }\n\n              if (error) {\n                return (\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Data fetching error\"\n                      secondary={JSON.stringify(error)}\n                    />\n                  </ListItem>\n                );\n              }\n\n              return data.repository.issues.edges.map((issue, index) => (\n                <IssueItem\n                  key={index}\n                  handleToggle={() =>\n                    toggleIssue({\n                      variables: { id: issue.node.id },\n                    })\n                  }\n                  {...issue.node}\n                />\n              ));\n            }}\n          </Query>\n        </List>\n      )}\n    </Mutation>\n  </div>\n);\n\nexport default withStyles(styles)(IssueList);\n","import React from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport IssueList from '../IssueList';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst styles = theme => ({\n  root: {\n    padding: 20,\n  },\n  app: {\n    maxWidth: 800,\n    margin: '0 auto',\n    padding: 20,\n  },\n});\n\nconst App = ({ classes }) => (\n  <div className={classes.root}>\n    <CssBaseline />\n    <Paper className={classes.app}>\n      <Typography variant=\"title\" component=\"h1\">\n        Latest 20 issues from facebook/react repo\n      </Typography>\n      <IssueList />\n    </Paper>\n  </div>\n);\n\nexport default withStyles(styles)(App);\n","import React from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport client from \"../../apollo\";\n\nimport App from \"../App\";\n\nconst Root = () => (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Root from \"./components/Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}